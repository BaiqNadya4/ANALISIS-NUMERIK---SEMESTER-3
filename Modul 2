import matplotlib.pyplot as plt
import numpy as np
from time import perf_counter as pc

# Fungsi yang akan dicari akarnya
def f(x):
    return x*3 + x*2 - 3*x - 3

# Turunan dari fungsi f(x) (khusus untuk Metode Newton-Raphson)
def f_turunan(x):
    return 3*x**2 + 2*x - 3

# ----------------------------------------------------------------------
# METODE NEWTON-RAPHSON
# ----------------------------------------------------------------------
def newton_raphson(x0, tol=1e-6, max_iter=100):
    print("Iterasi\t   x\t\t   f(x)")
    nilai_x = []
    for i in range(max_iter):
        fx = f(x0)
        fpx = f_turunan(x0)

        if fpx == 0:
            print("Turunan nol, metode berhenti.")
            break

        x1 = x0 - fx / fpx
        # Perubahan pada print statement agar sesuai dengan output asli
        # print(f"{i+1}\t{x0:.6f}\t{fx:.6f}") 
        nilai_x.append(x1)

        if abs(x1 - x0) < tol:
            print(f"{i+1}\t{x0:.6f}\t{fx:.6f}") # Cetak iterasi terakhir
            print("\nAkar ditemukan pada x =", x1)
            return x1, nilai_x

        print(f"{i+1}\t{x0:.6f}\t{fx:.6f}")
        x0 = x1

    print("\nMetode tidak konvergen.")
    return None, nilai_x

# Menjalankan metode Newton-Raphson dengan tebakan awal x0=3
# akar_newton, nilai_x_newton = newton_raphson(3)


# ----------------------------------------------------------------------
# METODE BISEKSI
# ----------------------------------------------------------------------
def bisection(a, b, tol=1e-6, max_iter=100):
    fa, fb = f(a), f(b)
    if fa * fb > 0:
        raise ValueError("f(a) dan f(b) harus berlawanan tanda. Pilih interval lain.")
    history = []
    start = pc()
    for i in range(1, max_iter+1):
        c = (a + b) / 2.0
        fc = f(c)
        history.append((i, a, b, c, fc))
        # print(f"Iter {i:2d}: a={a:.8f}, b={b:.8f}, c={c:.8f}, f(c)={fc:.8e}")
        
        if abs(fc) < tol or (b - a)/2.0 < tol:
            end = pc()
            # print(f"\nAkar diperkirakan di x = {c:.12f}")
            # print(f"f(c) = {fc:.12e}")
            # print(f"Iterasi = {i}, waktu = {(end-start):.6f} s")
            return c, history
        
        if fa * fc < 0:
            b = c
            fb = fc
        else:
            a = c
            fa = fc
            
    end = pc()
    # print("\nMetode tidak konvergen dalam batas iterasi.")
    return c, history

# Menjalankan metode Biseksi pada interval [1, 2]
# akar_biseksi, hist_biseksi = bisection(1, 2, tol=1e-6, max_iter=100)


# ----------------------------------------------------------------------
# METODE SECANT
# ----------------------------------------------------------------------
def secant(x0, x1, tol=1e-6, max_iter=100):
  print("Iterasi\t   x0\t\t   x1\t\t   x2\t\tf(x2)")
  nilai_x = []
  for i in range(max_iter):
    f0 = f(x0)
    f1 = f(x1)
    if f1 - f0 == 0:
      print("Error: karena pembagian dengan nol")
      break
    x2 = x1 - f1 * (x1 - x0) / (f1 - f0)
    f2 = f(x2)
    # print(f"{i+1}\t{x0:.6f}\t{x1:.6f}\t{x2:.6f}\t{f2:.6f}")
    nilai_x.append(x2)
    if abs(f2) < tol:
      print(f"{i+1}\t{x0:.6f}\t{x1:.6f}\t{x2:.6f}\t{f2:.6f}") # Cetak iterasi terakhir
      print("\nAkar ditemukan pada x =", x2)
      return x2, nilai_x
    
    print(f"{i+1}\t{x0:.6f}\t{x1:.6f}\t{x2:.6f}\t{f2:.6f}")
    x0, x1 = x1, x2
    
  print("\nMetode tidak konvergen.")
  return None, nilai_x

# Menjalankan metode Secant dengan tebakan awal x0=2 dan x1=3
# akar_secant, nilai_x_secant = secant(2, 3)


# ----------------------------------------------------------------------
# FUNGSI PLOT VISUALISASI ITERASI
# ----------------------------------------------------------------------
def plot_iterasi(nilai_x, metode):
    x_vals = np.linspace(-5, 5, 100)
    y_vals = f(x_vals)
    plt.figure(figsize=(8, 5))
    plt.plot(x_vals, y_vals, label='f(x)')
    plt.axhline(0, color='gray', linestyle='--')
    plt.scatter(nilai_x, [f(x) for x in nilai_x], color='blue', label='Titik Iterasi')
    plt.title(f'Visualisasi Iterasi - Metode {metode}')
    plt.xlabel('x')
    plt.ylabel('f(x)')
    plt.legend()
    plt.grid(True)
    plt.show()

# Contoh eksekusi untuk visualisasi

# 1. Biseksi
akar, history = bisection(1, 2)
midpoints = [h[3] for h in history]
plot_iterasi(midpoints, 'Bisection')

# 2. Newton-Raphson
akar, nilai_x = newton_raphson(3)
plot_iterasi(nilai_x, 'Newton-Raphson')

# 3. Secant
akar, nilai_x = secant(2, 3)
plot_iterasi(nilai_x, 'Secant')
